package applications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetApplicationParams creates a new GetApplicationParams object
// with the default values initialized.
func NewGetApplicationParams() *GetApplicationParams {
	var (
		countDefault = int32(10)
		indexDefault = int32(0)
	)
	return &GetApplicationParams{
		Count: &countDefault,
		Index: &indexDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetApplicationParamsWithTimeout creates a new GetApplicationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetApplicationParamsWithTimeout(timeout time.Duration) *GetApplicationParams {
	var (
		countDefault = int32(10)
		indexDefault = int32(0)
	)
	return &GetApplicationParams{
		Count: &countDefault,
		Index: &indexDefault,

		timeout: timeout,
	}
}

// NewGetApplicationParamsWithContext creates a new GetApplicationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetApplicationParamsWithContext(ctx context.Context) *GetApplicationParams {
	var (
		countDefault = int32(10)
		indexDefault = int32(0)
	)
	return &GetApplicationParams{
		Count: &countDefault,
		Index: &indexDefault,

		Context: ctx,
	}
}

// NewGetApplicationParamsWithHTTPClient creates a new GetApplicationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetApplicationParamsWithHTTPClient(client *http.Client) *GetApplicationParams {
	var (
		countDefault = int32(10)
		indexDefault = int32(0)
	)
	return &GetApplicationParams{
		Count:      &countDefault,
		Index:      &indexDefault,
		HTTPClient: client,
	}
}

/*GetApplicationParams contains all the parameters to send to the API endpoint
for the get application operation typically these are written to a http.Request
*/
type GetApplicationParams struct {

	/*Count
	  Number of events desired.  Will return fewer if there are fewer to return.

	*/
	Count *int32
	/*Index
	  Index of the first event in the set of returned results.  Negative index will count from the end of the results.

	*/
	Index *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get application params
func (o *GetApplicationParams) WithTimeout(timeout time.Duration) *GetApplicationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get application params
func (o *GetApplicationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get application params
func (o *GetApplicationParams) WithContext(ctx context.Context) *GetApplicationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get application params
func (o *GetApplicationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get application params
func (o *GetApplicationParams) WithHTTPClient(client *http.Client) *GetApplicationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get application params
func (o *GetApplicationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get application params
func (o *GetApplicationParams) WithCount(count *int32) *GetApplicationParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get application params
func (o *GetApplicationParams) SetCount(count *int32) {
	o.Count = count
}

// WithIndex adds the index to the get application params
func (o *GetApplicationParams) WithIndex(index *int32) *GetApplicationParams {
	o.SetIndex(index)
	return o
}

// SetIndex adds the index to the get application params
func (o *GetApplicationParams) SetIndex(index *int32) {
	o.Index = index
}

// WriteToRequest writes these params to a swagger request
func (o *GetApplicationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int32
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt32(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Index != nil {

		// query param index
		var qrIndex int32
		if o.Index != nil {
			qrIndex = *o.Index
		}
		qIndex := swag.FormatInt32(qrIndex)
		if qIndex != "" {
			if err := r.SetQueryParam("index", qIndex); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
