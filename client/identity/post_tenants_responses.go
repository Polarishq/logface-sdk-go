package identity

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Polarishq/api-client-go/models"
)

// PostTenantsReader is a Reader for the PostTenants structure.
type PostTenantsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PostTenantsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewPostTenantsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 403:
		result := NewPostTenantsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewPostTenantsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPostTenantsOK creates a PostTenantsOK with default headers values
func NewPostTenantsOK() *PostTenantsOK {
	return &PostTenantsOK{}
}

/*PostTenantsOK handles this case with default header values.

Tenant added successfully
*/
type PostTenantsOK struct {
	Payload *models.Tenant
}

func (o *PostTenantsOK) Error() string {
	return fmt.Sprintf("[POST /tenants][%d] postTenantsOK  %+v", 200, o.Payload)
}

func (o *PostTenantsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Tenant)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTenantsForbidden creates a PostTenantsForbidden with default headers values
func NewPostTenantsForbidden() *PostTenantsForbidden {
	return &PostTenantsForbidden{}
}

/*PostTenantsForbidden handles this case with default header values.

TOS has not been accepted
*/
type PostTenantsForbidden struct {
	Payload *models.Error
}

func (o *PostTenantsForbidden) Error() string {
	return fmt.Sprintf("[POST /tenants][%d] postTenantsForbidden  %+v", 403, o.Payload)
}

func (o *PostTenantsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPostTenantsDefault creates a PostTenantsDefault with default headers values
func NewPostTenantsDefault(code int) *PostTenantsDefault {
	return &PostTenantsDefault{
		_statusCode: code,
	}
}

/*PostTenantsDefault handles this case with default header values.

Unexpected error
*/
type PostTenantsDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the post tenants default response
func (o *PostTenantsDefault) Code() int {
	return o._statusCode
}

func (o *PostTenantsDefault) Error() string {
	return fmt.Sprintf("[POST /tenants][%d] PostTenants default  %+v", o._statusCode, o.Payload)
}

func (o *PostTenantsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*PostTenantsBody post tenants body
swagger:model PostTenantsBody
*/
type PostTenantsBody struct {

	// The label for the tenant
	Label string `json:"label,omitempty"`
}

// MarshalBinary interface implementation
func (o *PostTenantsBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTenantsBody) UnmarshalBinary(b []byte) error {
	var res PostTenantsBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
