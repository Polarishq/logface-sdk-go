package login

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/Polarishq/api-client-go/models"
)

// GetLoginAuthorizeReader is a Reader for the GetLoginAuthorize structure.
type GetLoginAuthorizeReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetLoginAuthorizeReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 302:
		result := NewGetLoginAuthorizeFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetLoginAuthorizeDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetLoginAuthorizeFound creates a GetLoginAuthorizeFound with default headers values
func NewGetLoginAuthorizeFound() *GetLoginAuthorizeFound {
	return &GetLoginAuthorizeFound{}
}

/*GetLoginAuthorizeFound handles this case with default header values.

Redirecting to social auth provider
*/
type GetLoginAuthorizeFound struct {
	Location string
}

func (o *GetLoginAuthorizeFound) Error() string {
	return fmt.Sprintf("[GET /login/authorize][%d] getLoginAuthorizeFound ", 302)
}

func (o *GetLoginAuthorizeFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Location
	o.Location = response.GetHeader("Location")

	return nil
}

// NewGetLoginAuthorizeDefault creates a GetLoginAuthorizeDefault with default headers values
func NewGetLoginAuthorizeDefault(code int) *GetLoginAuthorizeDefault {
	return &GetLoginAuthorizeDefault{
		_statusCode: code,
	}
}

/*GetLoginAuthorizeDefault handles this case with default header values.

Unexpected error
*/
type GetLoginAuthorizeDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get login authorize default response
func (o *GetLoginAuthorizeDefault) Code() int {
	return o._statusCode
}

func (o *GetLoginAuthorizeDefault) Error() string {
	return fmt.Sprintf("[GET /login/authorize][%d] GetLoginAuthorize default  %+v", o._statusCode, o.Payload)
}

func (o *GetLoginAuthorizeDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
